import '../domain/entities/transaction.dart';
import 'transaction_remote_data_source.dart';
import '../../../core/network_service.dart';
import '../../../core/network_client.dart';

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏)
final _mockTransactions = <Transaction>[
  Transaction(
    id: 1,
    account: AccountBrief(
      id: 1,
      name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
      balance: 1000.0,
      currency: 'RUB',
    ),
    category: Category(
      id: 1,
      name: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      emoji: 'üí∞',
      isIncome: true,
    ),
    amount: 5000.0,
    transactionDate: DateTime.now(),
    comment: '–ú–æ–∫ –¥–æ—Ö–æ–¥',
    createdAt: DateTime.now(),
    updatedAt: DateTime.now(),
  ),
  Transaction(
    id: 2,
    account: AccountBrief(
      id: 1,
      name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç',
      balance: 1000.0,
      currency: 'RUB',
    ),
    category: Category(
      id: 4,
      name: '–ü—Ä–æ–¥—É–∫—Ç—ã',
      emoji: 'üçé',
      isIncome: false,
    ),
    amount: 1200.0,
    transactionDate: DateTime.now(),
    comment: '–ú–æ–∫ —Ä–∞—Å—Ö–æ–¥',
    createdAt: DateTime.now(),
    updatedAt: DateTime.now(),
  ),
];

class MockTransactionRemoteDataSource extends TransactionRemoteDataSource {
  MockTransactionRemoteDataSource()
      : super(networkService: NetworkService(NetworkClient()));

  @override
  Future<List<Transaction>> getTransactionsByPeriod({
    required int accountId,
    required DateTime startDate,
    required DateTime endDate,
  }) async {
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ accountId –∏ –¥–∞—Ç–µ
    return _mockTransactions
        .where((t) =>
            t.account.id == accountId &&
            t.transactionDate
                .isAfter(startDate.subtract(const Duration(seconds: 1))) &&
            t.transactionDate.isBefore(endDate.add(const Duration(seconds: 1))))
        .toList();
  }

  @override
  Future<void> addTransaction(Transaction transaction) async {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å transaction –≤ _mockTransactions, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return;
  }
}
