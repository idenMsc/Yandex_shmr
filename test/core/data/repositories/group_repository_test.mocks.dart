// Mocks generated by Mockito 5.4.6 from annotations
// in shmr_25/test/core/data/repositories/group_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i7;

import 'package:drift/drift.dart' as _i2;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i4;
import 'package:drift/src/runtime/types/mapping.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:shmr_25/core/data/database.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMigrationStrategy_0 extends _i1.SmartFake
    implements _i2.MigrationStrategy {
  _FakeMigrationStrategy_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$WalletTableTable_1 extends _i1.SmartFake
    implements _i3.$WalletTableTable {
  _Fake$WalletTableTable_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$OperationTableTable_2 extends _i1.SmartFake
    implements _i3.$OperationTableTable {
  _Fake$OperationTableTable_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$GroupTableTable_3 extends _i1.SmartFake
    implements _i3.$GroupTableTable {
  _Fake$GroupTableTable_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$FinanceDatabaseManager_4 extends _i1.SmartFake
    implements _i3.$FinanceDatabaseManager {
  _Fake$FinanceDatabaseManager_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeneratedDatabase_5 extends _i1.SmartFake
    implements _i2.GeneratedDatabase {
  _FakeGeneratedDatabase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDriftDatabaseOptions_6 extends _i1.SmartFake
    implements _i2.DriftDatabaseOptions {
  _FakeDriftDatabaseOptions_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamQueryUpdateRules_7 extends _i1.SmartFake
    implements _i2.StreamQueryUpdateRules {
  _FakeStreamQueryUpdateRules_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseConnection_8 extends _i1.SmartFake
    implements _i2.DatabaseConnection {
  _FakeDatabaseConnection_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryExecutor_9 extends _i1.SmartFake implements _i2.QueryExecutor {
  _FakeQueryExecutor_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamQueryStore_10 extends _i1.SmartFake
    implements _i4.StreamQueryStore {
  _FakeStreamQueryStore_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseConnectionUser_11 extends _i1.SmartFake
    implements _i2.DatabaseConnectionUser {
  _FakeDatabaseConnectionUser_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMigrator_12 extends _i1.SmartFake implements _i2.Migrator {
  _FakeMigrator_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_13<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInsertStatement_14<T1 extends _i2.Table, D1> extends _i1.SmartFake
    implements _i2.InsertStatement<T1, D1> {
  _FakeInsertStatement_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateStatement_15<T extends _i2.Table, D> extends _i1.SmartFake
    implements _i2.UpdateStatement<T, D> {
  _FakeUpdateStatement_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSimpleSelectStatement_16<T1 extends _i2.HasResultSet, D>
    extends _i1.SmartFake implements _i2.SimpleSelectStatement<T1, D> {
  _FakeSimpleSelectStatement_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJoinedSelectStatement_17<FirstT extends _i2.HasResultSet, FirstD>
    extends _i1.SmartFake implements _i2.JoinedSelectStatement<FirstT, FirstD> {
  _FakeJoinedSelectStatement_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseSelectStatement_18<Row> extends _i1.SmartFake
    implements _i2.BaseSelectStatement<Row> {
  _FakeBaseSelectStatement_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteStatement_19<T1 extends _i2.Table, D1> extends _i1.SmartFake
    implements _i2.DeleteStatement<T1, D1> {
  _FakeDeleteStatement_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSelectable_20<T> extends _i1.SmartFake implements _i2.Selectable<T> {
  _FakeSelectable_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGenerationContext_21 extends _i1.SmartFake
    implements _i2.GenerationContext {
  _FakeGenerationContext_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeneratedColumn_22<T extends Object> extends _i1.SmartFake
    implements _i2.GeneratedColumn<T> {
  _FakeGeneratedColumn_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVerificationContext_23 extends _i1.SmartFake
    implements _i2.VerificationContext {
  _FakeVerificationContext_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGroupDbModel_24 extends _i1.SmartFake implements _i3.GroupDbModel {
  _FakeGroupDbModel_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColumnBuilder_25<T extends Object> extends _i1.SmartFake
    implements _i2.ColumnBuilder<T> {
  _FakeColumnBuilder_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResultSetImplementation_26<Tbl, Row> extends _i1.SmartFake
    implements _i2.ResultSetImplementation<Tbl, Row> {
  _FakeResultSetImplementation_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTableInfo_27<TableDsl extends _i2.Table, D1> extends _i1.SmartFake
    implements _i2.TableInfo<TableDsl, D1> {
  _FakeTableInfo_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FinanceDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFinanceDatabase extends _i1.Mock implements _i3.FinanceDatabase {
  MockFinanceDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get schemaVersion => (super.noSuchMethod(
        Invocation.getter(#schemaVersion),
        returnValue: 0,
      ) as int);

  @override
  _i2.MigrationStrategy get migration => (super.noSuchMethod(
        Invocation.getter(#migration),
        returnValue: _FakeMigrationStrategy_0(
          this,
          Invocation.getter(#migration),
        ),
      ) as _i2.MigrationStrategy);

  @override
  _i3.$WalletTableTable get walletTable => (super.noSuchMethod(
        Invocation.getter(#walletTable),
        returnValue: _Fake$WalletTableTable_1(
          this,
          Invocation.getter(#walletTable),
        ),
      ) as _i3.$WalletTableTable);

  @override
  _i3.$OperationTableTable get operationTable => (super.noSuchMethod(
        Invocation.getter(#operationTable),
        returnValue: _Fake$OperationTableTable_2(
          this,
          Invocation.getter(#operationTable),
        ),
      ) as _i3.$OperationTableTable);

  @override
  _i3.$GroupTableTable get groupTable => (super.noSuchMethod(
        Invocation.getter(#groupTable),
        returnValue: _Fake$GroupTableTable_3(
          this,
          Invocation.getter(#groupTable),
        ),
      ) as _i3.$GroupTableTable);

  @override
  _i3.$FinanceDatabaseManager get managers => (super.noSuchMethod(
        Invocation.getter(#managers),
        returnValue: _Fake$FinanceDatabaseManager_4(
          this,
          Invocation.getter(#managers),
        ),
      ) as _i3.$FinanceDatabaseManager);

  @override
  Iterable<_i2.TableInfo<_i2.Table, Object?>> get allTables =>
      (super.noSuchMethod(
        Invocation.getter(#allTables),
        returnValue: <_i2.TableInfo<_i2.Table, Object?>>[],
      ) as Iterable<_i2.TableInfo<_i2.Table, Object?>>);

  @override
  List<_i2.DatabaseSchemaEntity> get allSchemaEntities => (super.noSuchMethod(
        Invocation.getter(#allSchemaEntities),
        returnValue: <_i2.DatabaseSchemaEntity>[],
      ) as List<_i2.DatabaseSchemaEntity>);

  @override
  _i2.GeneratedDatabase get attachedDatabase => (super.noSuchMethod(
        Invocation.getter(#attachedDatabase),
        returnValue: _FakeGeneratedDatabase_5(
          this,
          Invocation.getter(#attachedDatabase),
        ),
      ) as _i2.GeneratedDatabase);

  @override
  _i2.DriftDatabaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeDriftDatabaseOptions_6(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.DriftDatabaseOptions);

  @override
  _i2.StreamQueryUpdateRules get streamUpdateRules => (super.noSuchMethod(
        Invocation.getter(#streamUpdateRules),
        returnValue: _FakeStreamQueryUpdateRules_7(
          this,
          Invocation.getter(#streamUpdateRules),
        ),
      ) as _i2.StreamQueryUpdateRules);

  @override
  _i2.DatabaseConnection get connection => (super.noSuchMethod(
        Invocation.getter(#connection),
        returnValue: _FakeDatabaseConnection_8(
          this,
          Invocation.getter(#connection),
        ),
      ) as _i2.DatabaseConnection);

  @override
  _i2.SqlTypes get typeMapping => (super.noSuchMethod(
        Invocation.getter(#typeMapping),
        returnValue: _i6.dummyValue<_i2.SqlTypes>(
          this,
          Invocation.getter(#typeMapping),
        ),
      ) as _i2.SqlTypes);

  @override
  _i2.QueryExecutor get executor => (super.noSuchMethod(
        Invocation.getter(#executor),
        returnValue: _FakeQueryExecutor_9(
          this,
          Invocation.getter(#executor),
        ),
      ) as _i2.QueryExecutor);

  @override
  _i4.StreamQueryStore get streamQueries => (super.noSuchMethod(
        Invocation.getter(#streamQueries),
        returnValue: _FakeStreamQueryStore_10(
          this,
          Invocation.getter(#streamQueries),
        ),
      ) as _i4.StreamQueryStore);

  @override
  _i2.DatabaseConnectionUser get resolvedEngine => (super.noSuchMethod(
        Invocation.getter(#resolvedEngine),
        returnValue: _FakeDatabaseConnectionUser_11(
          this,
          Invocation.getter(#resolvedEngine),
        ),
      ) as _i2.DatabaseConnectionUser);

  @override
  _i5.Stream<List<_i3.WalletDbModel>> getAllWallets() => (super.noSuchMethod(
        Invocation.method(
          #getAllWallets,
          [],
        ),
        returnValue: _i5.Stream<List<_i3.WalletDbModel>>.empty(),
      ) as _i5.Stream<List<_i3.WalletDbModel>>);

  @override
  _i5.Stream<List<_i3.OperationDbModel>> getAllOperations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllOperations,
          [],
        ),
        returnValue: _i5.Stream<List<_i3.OperationDbModel>>.empty(),
      ) as _i5.Stream<List<_i3.OperationDbModel>>);

  @override
  _i5.Stream<List<_i3.GroupDbModel>> getAllGroups() => (super.noSuchMethod(
        Invocation.method(
          #getAllGroups,
          [],
        ),
        returnValue: _i5.Stream<List<_i3.GroupDbModel>>.empty(),
      ) as _i5.Stream<List<_i3.GroupDbModel>>);

  @override
  _i5.Stream<List<_i3.OperationDbModel>> getOperationsByWallet(int? walletId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOperationsByWallet,
          [walletId],
        ),
        returnValue: _i5.Stream<List<_i3.OperationDbModel>>.empty(),
      ) as _i5.Stream<List<_i3.OperationDbModel>>);

  @override
  _i2.Migrator createMigrator() => (super.noSuchMethod(
        Invocation.method(
          #createMigrator,
          [],
        ),
        returnValue: _FakeMigrator_12(
          this,
          Invocation.method(
            #createMigrator,
            [],
          ),
        ),
      ) as _i2.Migrator);

  @override
  _i5.Future<void> beforeOpen(
    _i2.QueryExecutor? executor,
    _i2.OpeningDetails? details,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #beforeOpen,
          [
            executor,
            details,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<T> createStream<T extends Object>(
          _i4.QueryStreamFetcher<T>? stmt) =>
      (super.noSuchMethod(
        Invocation.method(
          #createStream,
          [stmt],
        ),
        returnValue: _i5.Stream<T>.empty(),
      ) as _i5.Stream<T>);

  @override
  T alias<T, D>(
    _i2.ResultSetImplementation<T, D>? table,
    String? alias,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #alias,
          [
            table,
            alias,
          ],
        ),
        returnValue: _i6.dummyValue<T>(
          this,
          Invocation.method(
            #alias,
            [
              table,
              alias,
            ],
          ),
        ),
      ) as T);

  @override
  void markTablesUpdated(Iterable<_i2.TableInfo<_i2.Table, dynamic>>? tables) =>
      super.noSuchMethod(
        Invocation.method(
          #markTablesUpdated,
          [tables],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyUpdates(Set<_i2.TableUpdate>? updates) => super.noSuchMethod(
        Invocation.method(
          #notifyUpdates,
          [updates],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Stream<Set<_i2.TableUpdate>> tableUpdates(
          [_i2.TableUpdateQuery? query = const _i2.TableUpdateQuery.any()]) =>
      (super.noSuchMethod(
        Invocation.method(
          #tableUpdates,
          [query],
        ),
        returnValue: _i5.Stream<Set<_i2.TableUpdate>>.empty(),
      ) as _i5.Stream<Set<_i2.TableUpdate>>);

  @override
  _i5.Future<T> doWhenOpened<T>(
          _i5.FutureOr<T> Function(_i2.QueryExecutor)? fn) =>
      (super.noSuchMethod(
        Invocation.method(
          #doWhenOpened,
          [fn],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #doWhenOpened,
                  [fn],
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_13<T>(
              this,
              Invocation.method(
                #doWhenOpened,
                [fn],
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i2.InsertStatement<T, D> into<T extends _i2.Table, D>(
          _i2.TableInfo<T, D>? table) =>
      (super.noSuchMethod(
        Invocation.method(
          #into,
          [table],
        ),
        returnValue: _FakeInsertStatement_14<T, D>(
          this,
          Invocation.method(
            #into,
            [table],
          ),
        ),
      ) as _i2.InsertStatement<T, D>);

  @override
  _i2.UpdateStatement<Tbl, R> update<Tbl extends _i2.Table, R>(
          _i2.TableInfo<Tbl, R>? table) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [table],
        ),
        returnValue: _FakeUpdateStatement_15<Tbl, R>(
          this,
          Invocation.method(
            #update,
            [table],
          ),
        ),
      ) as _i2.UpdateStatement<Tbl, R>);

  @override
  _i2.SimpleSelectStatement<T, R> select<T extends _i2.HasResultSet, R>(
    _i2.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [table],
          {#distinct: distinct},
        ),
        returnValue: _FakeSimpleSelectStatement_16<T, R>(
          this,
          Invocation.method(
            #select,
            [table],
            {#distinct: distinct},
          ),
        ),
      ) as _i2.SimpleSelectStatement<T, R>);

  @override
  _i2.JoinedSelectStatement<T, R> selectOnly<T extends _i2.HasResultSet, R>(
    _i2.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectOnly,
          [table],
          {#distinct: distinct},
        ),
        returnValue: _FakeJoinedSelectStatement_17<T, R>(
          this,
          Invocation.method(
            #selectOnly,
            [table],
            {#distinct: distinct},
          ),
        ),
      ) as _i2.JoinedSelectStatement<T, R>);

  @override
  _i2.BaseSelectStatement<_i2.TypedResult> selectExpressions(
          Iterable<_i2.Expression<Object>>? columns) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectExpressions,
          [columns],
        ),
        returnValue: _FakeBaseSelectStatement_18<_i2.TypedResult>(
          this,
          Invocation.method(
            #selectExpressions,
            [columns],
          ),
        ),
      ) as _i2.BaseSelectStatement<_i2.TypedResult>);

  @override
  _i2.DeleteStatement<T, D> delete<T extends _i2.Table, D>(
          _i2.TableInfo<T, D>? table) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
        ),
        returnValue: _FakeDeleteStatement_19<T, D>(
          this,
          Invocation.method(
            #delete,
            [table],
          ),
        ),
      ) as _i2.DeleteStatement<T, D>);

  @override
  _i5.Future<int> customUpdate(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i2.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customUpdate,
          [query],
          {
            #variables: variables,
            #updates: updates,
            #updateKind: updateKind,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> customInsert(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? updates,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customInsert,
          [query],
          {
            #variables: variables,
            #updates: updates,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.QueryRow>> customWriteReturning(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i2.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customWriteReturning,
          [query],
          {
            #variables: variables,
            #updates: updates,
            #updateKind: updateKind,
          },
        ),
        returnValue: _i5.Future<List<_i2.QueryRow>>.value(<_i2.QueryRow>[]),
      ) as _i5.Future<List<_i2.QueryRow>>);

  @override
  _i2.Selectable<_i2.QueryRow> customSelect(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customSelect,
          [query],
          {
            #variables: variables,
            #readsFrom: readsFrom,
          },
        ),
        returnValue: _FakeSelectable_20<_i2.QueryRow>(
          this,
          Invocation.method(
            #customSelect,
            [query],
            {
              #variables: variables,
              #readsFrom: readsFrom,
            },
          ),
        ),
      ) as _i2.Selectable<_i2.QueryRow>);

  @override
  _i2.Selectable<_i2.QueryRow> customSelectQuery(
    String? query, {
    List<_i2.Variable<Object>>? variables = const [],
    Set<_i2.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #customSelectQuery,
          [query],
          {
            #variables: variables,
            #readsFrom: readsFrom,
          },
        ),
        returnValue: _FakeSelectable_20<_i2.QueryRow>(
          this,
          Invocation.method(
            #customSelectQuery,
            [query],
            {
              #variables: variables,
              #readsFrom: readsFrom,
            },
          ),
        ),
      ) as _i2.Selectable<_i2.QueryRow>);

  @override
  _i5.Future<void> customStatement(
    String? statement, [
    List<dynamic>? args,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #customStatement,
          [
            statement,
            args,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<T> transaction<T>(
    _i5.Future<T> Function()? action, {
    bool? requireNew = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#requireNew: requireNew},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#requireNew: requireNew},
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_13<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#requireNew: requireNew},
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i5.Future<T> exclusively<T>(_i5.Future<T> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #exclusively,
          [action],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #exclusively,
                  [action],
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_13<T>(
              this,
              Invocation.method(
                #exclusively,
                [action],
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i5.Future<void> batch(_i5.FutureOr<void> Function(_i2.Batch)? runInBatch) =>
      (super.noSuchMethod(
        Invocation.method(
          #batch,
          [runInBatch],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<T> runWithInterceptor<T>(
    _i5.Future<T> Function()? action, {
    required _i2.QueryInterceptor? interceptor,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runWithInterceptor,
          [action],
          {#interceptor: interceptor},
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runWithInterceptor,
                  [action],
                  {#interceptor: interceptor},
                ),
              ),
              (T v) => _i5.Future<T>.value(v),
            ) ??
            _FakeFuture_13<T>(
              this,
              Invocation.method(
                #runWithInterceptor,
                [action],
                {#interceptor: interceptor},
              ),
            ),
      ) as _i5.Future<T>);

  @override
  _i2.GenerationContext $write(
    _i2.Component? component, {
    bool? hasMultipleTables,
    int? startIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #$write,
          [component],
          {
            #hasMultipleTables: hasMultipleTables,
            #startIndex: startIndex,
          },
        ),
        returnValue: _FakeGenerationContext_21(
          this,
          Invocation.method(
            #$write,
            [component],
            {
              #hasMultipleTables: hasMultipleTables,
              #startIndex: startIndex,
            },
          ),
        ),
      ) as _i2.GenerationContext);

  @override
  _i2.GenerationContext $writeInsertable(
    _i2.TableInfo<_i2.Table, dynamic>? table,
    _i2.Insertable<dynamic>? insertable, {
    int? startIndex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #$writeInsertable,
          [
            table,
            insertable,
          ],
          {#startIndex: startIndex},
        ),
        returnValue: _FakeGenerationContext_21(
          this,
          Invocation.method(
            #$writeInsertable,
            [
              table,
              insertable,
            ],
            {#startIndex: startIndex},
          ),
        ),
      ) as _i2.GenerationContext);

  @override
  String $expandVar(
    int? start,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #$expandVar,
          [
            start,
            amount,
          ],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #$expandVar,
            [
              start,
              amount,
            ],
          ),
        ),
      ) as String);
}

/// A class which mocks [$GroupTableTable].
///
/// See the documentation for Mockito's code generation for more information.
class Mock$GroupTableTable extends _i1.Mock implements _i3.$GroupTableTable {
  Mock$GroupTableTable() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GeneratedDatabase get attachedDatabase => (super.noSuchMethod(
        Invocation.getter(#attachedDatabase),
        returnValue: _FakeGeneratedDatabase_5(
          this,
          Invocation.getter(#attachedDatabase),
        ),
      ) as _i2.GeneratedDatabase);

  @override
  _i2.GeneratedColumn<int> get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _FakeGeneratedColumn_22<int>(
          this,
          Invocation.getter(#id),
        ),
      ) as _i2.GeneratedColumn<int>);

  @override
  _i2.GeneratedColumn<int> get apiId => (super.noSuchMethod(
        Invocation.getter(#apiId),
        returnValue: _FakeGeneratedColumn_22<int>(
          this,
          Invocation.getter(#apiId),
        ),
      ) as _i2.GeneratedColumn<int>);

  @override
  _i2.GeneratedColumn<String> get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _FakeGeneratedColumn_22<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as _i2.GeneratedColumn<String>);

  @override
  _i2.GeneratedColumn<String> get emoji => (super.noSuchMethod(
        Invocation.getter(#emoji),
        returnValue: _FakeGeneratedColumn_22<String>(
          this,
          Invocation.getter(#emoji),
        ),
      ) as _i2.GeneratedColumn<String>);

  @override
  _i2.GeneratedColumn<bool> get isIncome => (super.noSuchMethod(
        Invocation.getter(#isIncome),
        returnValue: _FakeGeneratedColumn_22<bool>(
          this,
          Invocation.getter(#isIncome),
        ),
      ) as _i2.GeneratedColumn<bool>);

  @override
  List<_i2.GeneratedColumn<Object>> get $columns => (super.noSuchMethod(
        Invocation.getter(#$columns),
        returnValue: <_i2.GeneratedColumn<Object>>[],
      ) as List<_i2.GeneratedColumn<Object>>);

  @override
  String get aliasedName => (super.noSuchMethod(
        Invocation.getter(#aliasedName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#aliasedName),
        ),
      ) as String);

  @override
  String get actualTableName => (super.noSuchMethod(
        Invocation.getter(#actualTableName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#actualTableName),
        ),
      ) as String);

  @override
  Set<_i2.GeneratedColumn<Object>> get $primaryKey => (super.noSuchMethod(
        Invocation.getter(#$primaryKey),
        returnValue: <_i2.GeneratedColumn<Object>>{},
      ) as Set<_i2.GeneratedColumn<Object>>);

  @override
  bool get withoutRowId => (super.noSuchMethod(
        Invocation.getter(#withoutRowId),
        returnValue: false,
      ) as bool);

  @override
  bool get dontWriteConstraints => (super.noSuchMethod(
        Invocation.getter(#dontWriteConstraints),
        returnValue: false,
      ) as bool);

  @override
  bool get isStrict => (super.noSuchMethod(
        Invocation.getter(#isStrict),
        returnValue: false,
      ) as bool);

  @override
  Set<_i2.Column<Object>> get primaryKey => (super.noSuchMethod(
        Invocation.getter(#primaryKey),
        returnValue: <_i2.Column<Object>>{},
      ) as Set<_i2.Column<Object>>);

  @override
  List<Set<_i2.GeneratedColumn<Object>>> get uniqueKeys => (super.noSuchMethod(
        Invocation.getter(#uniqueKeys),
        returnValue: <Set<_i2.GeneratedColumn<Object>>>[],
      ) as List<Set<_i2.GeneratedColumn<Object>>>);

  @override
  List<String> get customConstraints => (super.noSuchMethod(
        Invocation.getter(#customConstraints),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i3.$GroupTableTable get asDslTable => (super.noSuchMethod(
        Invocation.getter(#asDslTable),
        returnValue: _Fake$GroupTableTable_3(
          this,
          Invocation.getter(#asDslTable),
        ),
      ) as _i3.$GroupTableTable);

  @override
  String get entityName => (super.noSuchMethod(
        Invocation.getter(#entityName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#entityName),
        ),
      ) as String);

  @override
  Map<String, _i2.GeneratedColumn<Object>> get columnsByName =>
      (super.noSuchMethod(
        Invocation.getter(#columnsByName),
        returnValue: <String, _i2.GeneratedColumn<Object>>{},
      ) as Map<String, _i2.GeneratedColumn<Object>>);

  @override
  _i2.VerificationContext validateIntegrity(
    _i2.Insertable<_i3.GroupDbModel>? instance, {
    bool? isInserting = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateIntegrity,
          [instance],
          {#isInserting: isInserting},
        ),
        returnValue: _FakeVerificationContext_23(
          this,
          Invocation.method(
            #validateIntegrity,
            [instance],
            {#isInserting: isInserting},
          ),
        ),
      ) as _i2.VerificationContext);

  @override
  _i3.GroupDbModel map(
    Map<String, dynamic>? data, {
    String? tablePrefix,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [data],
          {#tablePrefix: tablePrefix},
        ),
        returnValue: _FakeGroupDbModel_24(
          this,
          Invocation.method(
            #map,
            [data],
            {#tablePrefix: tablePrefix},
          ),
        ),
      ) as _i3.GroupDbModel);

  @override
  _i3.$GroupTableTable createAlias(String? alias) => (super.noSuchMethod(
        Invocation.method(
          #createAlias,
          [alias],
        ),
        returnValue: _Fake$GroupTableTable_3(
          this,
          Invocation.method(
            #createAlias,
            [alias],
          ),
        ),
      ) as _i3.$GroupTableTable);

  @override
  _i2.ColumnBuilder<int> integer() => (super.noSuchMethod(
        Invocation.method(
          #integer,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<int>(
          this,
          Invocation.method(
            #integer,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<int>);

  @override
  _i2.ColumnBuilder<BigInt> int64() => (super.noSuchMethod(
        Invocation.method(
          #int64,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<BigInt>(
          this,
          Invocation.method(
            #int64,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<BigInt>);

  @override
  _i2.ColumnBuilder<int> intEnum<T extends Enum>() => (super.noSuchMethod(
        Invocation.method(
          #intEnum,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<int>(
          this,
          Invocation.method(
            #intEnum,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<int>);

  @override
  _i2.ColumnBuilder<String> text() => (super.noSuchMethod(
        Invocation.method(
          #text,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<String>(
          this,
          Invocation.method(
            #text,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<String>);

  @override
  _i2.ColumnBuilder<String> textEnum<T extends Enum>() => (super.noSuchMethod(
        Invocation.method(
          #textEnum,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<String>(
          this,
          Invocation.method(
            #textEnum,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<String>);

  @override
  _i2.ColumnBuilder<bool> boolean() => (super.noSuchMethod(
        Invocation.method(
          #boolean,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<bool>(
          this,
          Invocation.method(
            #boolean,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<bool>);

  @override
  _i2.ColumnBuilder<DateTime> dateTime() => (super.noSuchMethod(
        Invocation.method(
          #dateTime,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<DateTime>(
          this,
          Invocation.method(
            #dateTime,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<DateTime>);

  @override
  _i2.ColumnBuilder<_i7.Uint8List> blob() => (super.noSuchMethod(
        Invocation.method(
          #blob,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<_i7.Uint8List>(
          this,
          Invocation.method(
            #blob,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<_i7.Uint8List>);

  @override
  _i2.ColumnBuilder<double> real() => (super.noSuchMethod(
        Invocation.method(
          #real,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<double>(
          this,
          Invocation.method(
            #real,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<double>);

  @override
  _i2.ColumnBuilder<_i2.DriftAny> sqliteAny() => (super.noSuchMethod(
        Invocation.method(
          #sqliteAny,
          [],
        ),
        returnValue: _FakeColumnBuilder_25<_i2.DriftAny>(
          this,
          Invocation.method(
            #sqliteAny,
            [],
          ),
        ),
      ) as _i2.ColumnBuilder<_i2.DriftAny>);

  @override
  _i2.ColumnBuilder<T> customType<T extends Object>(
          _i8.UserDefinedSqlType<T>? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #customType,
          [type],
        ),
        returnValue: _FakeColumnBuilder_25<T>(
          this,
          Invocation.method(
            #customType,
            [type],
          ),
        ),
      ) as _i2.ColumnBuilder<T>);

  @override
  _i5.Future<_i3.GroupDbModel> mapFromCompanion(
    _i2.Insertable<_i3.GroupDbModel>? companion,
    _i2.DatabaseConnectionUser? database,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #mapFromCompanion,
          [
            companion,
            database,
          ],
        ),
        returnValue: _i5.Future<_i3.GroupDbModel>.value(_FakeGroupDbModel_24(
          this,
          Invocation.method(
            #mapFromCompanion,
            [
              companion,
              database,
            ],
          ),
        )),
      ) as _i5.Future<_i3.GroupDbModel>);
}

/// A class which mocks [UpdateStatement].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateStatement<T extends _i2.Table, D> extends _i1.Mock
    implements _i2.UpdateStatement<T, D> {
  MockUpdateStatement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseConnectionUser get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseConnectionUser_11(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.DatabaseConnectionUser);

  @override
  _i2.ResultSetImplementation<T, D> get table => (super.noSuchMethod(
        Invocation.getter(#table),
        returnValue: _FakeResultSetImplementation_26<T, D>(
          this,
          Invocation.getter(#table),
        ),
      ) as _i2.ResultSetImplementation<T, D>);

  @override
  bool get writeReturningClause => (super.noSuchMethod(
        Invocation.getter(#writeReturningClause),
        returnValue: false,
      ) as bool);

  @override
  set database(_i2.DatabaseConnectionUser? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set table(_i2.ResultSetImplementation<T, D>? _table) => super.noSuchMethod(
        Invocation.setter(
          #table,
          _table,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set whereExpr(_i2.Where? _whereExpr) => super.noSuchMethod(
        Invocation.setter(
          #whereExpr,
          _whereExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set orderByExpr(_i2.OrderBy? _orderByExpr) => super.noSuchMethod(
        Invocation.setter(
          #orderByExpr,
          _orderByExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set limitExpr(_i2.Limit? _limitExpr) => super.noSuchMethod(
        Invocation.setter(
          #limitExpr,
          _limitExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set writeReturningClause(bool? _writeReturningClause) => super.noSuchMethod(
        Invocation.setter(
          #writeReturningClause,
          _writeReturningClause,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeStartPart(_i2.GenerationContext? ctx) => super.noSuchMethod(
        Invocation.method(
          #writeStartPart,
          [ctx],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<int> write(
    _i2.Insertable<D>? entity, {
    bool? dontExecute = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [entity],
          {#dontExecute: dontExecute},
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<D>> writeReturning(_i2.Insertable<D>? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeReturning,
          [entity],
        ),
        returnValue: _i5.Future<List<D>>.value(<D>[]),
      ) as _i5.Future<List<D>>);

  @override
  _i5.Future<bool> replace(
    _i2.Insertable<D>? entity, {
    bool? dontExecute = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replace,
          [entity],
          {#dontExecute: dontExecute},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  void writeInto(_i2.GenerationContext? context) => super.noSuchMethod(
        Invocation.method(
          #writeInto,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.GenerationContext constructQuery() => (super.noSuchMethod(
        Invocation.method(
          #constructQuery,
          [],
        ),
        returnValue: _FakeGenerationContext_21(
          this,
          Invocation.method(
            #constructQuery,
            [],
          ),
        ),
      ) as _i2.GenerationContext);

  @override
  void where(_i2.Expression<bool> Function(T)? filter) => super.noSuchMethod(
        Invocation.method(
          #where,
          [filter],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DeleteStatement].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteStatement<T extends _i2.Table, D> extends _i1.Mock
    implements _i2.DeleteStatement<T, D> {
  MockDeleteStatement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseConnectionUser get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseConnectionUser_11(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.DatabaseConnectionUser);

  @override
  _i2.ResultSetImplementation<T, D> get table => (super.noSuchMethod(
        Invocation.getter(#table),
        returnValue: _FakeResultSetImplementation_26<T, D>(
          this,
          Invocation.getter(#table),
        ),
      ) as _i2.ResultSetImplementation<T, D>);

  @override
  bool get writeReturningClause => (super.noSuchMethod(
        Invocation.getter(#writeReturningClause),
        returnValue: false,
      ) as bool);

  @override
  set database(_i2.DatabaseConnectionUser? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set table(_i2.ResultSetImplementation<T, D>? _table) => super.noSuchMethod(
        Invocation.setter(
          #table,
          _table,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set whereExpr(_i2.Where? _whereExpr) => super.noSuchMethod(
        Invocation.setter(
          #whereExpr,
          _whereExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set orderByExpr(_i2.OrderBy? _orderByExpr) => super.noSuchMethod(
        Invocation.setter(
          #orderByExpr,
          _orderByExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set limitExpr(_i2.Limit? _limitExpr) => super.noSuchMethod(
        Invocation.setter(
          #limitExpr,
          _limitExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set writeReturningClause(bool? _writeReturningClause) => super.noSuchMethod(
        Invocation.setter(
          #writeReturningClause,
          _writeReturningClause,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeStartPart(_i2.GenerationContext? ctx) => super.noSuchMethod(
        Invocation.method(
          #writeStartPart,
          [ctx],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<int> delete(_i2.Insertable<D>? entity) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [entity],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<D?> deleteReturning(_i2.Insertable<D>? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteReturning,
          [entity],
        ),
        returnValue: _i5.Future<D?>.value(),
      ) as _i5.Future<D?>);

  @override
  _i5.Future<int> go() => (super.noSuchMethod(
        Invocation.method(
          #go,
          [],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<D>> goAndReturn() => (super.noSuchMethod(
        Invocation.method(
          #goAndReturn,
          [],
        ),
        returnValue: _i5.Future<List<D>>.value(<D>[]),
      ) as _i5.Future<List<D>>);

  @override
  void writeInto(_i2.GenerationContext? context) => super.noSuchMethod(
        Invocation.method(
          #writeInto,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.GenerationContext constructQuery() => (super.noSuchMethod(
        Invocation.method(
          #constructQuery,
          [],
        ),
        returnValue: _FakeGenerationContext_21(
          this,
          Invocation.method(
            #constructQuery,
            [],
          ),
        ),
      ) as _i2.GenerationContext);

  @override
  void where(_i2.Expression<bool> Function(T)? filter) => super.noSuchMethod(
        Invocation.method(
          #where,
          [filter],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [InsertStatement].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsertStatement<T extends _i2.Table, D> extends _i1.Mock
    implements _i2.InsertStatement<T, D> {
  MockInsertStatement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseConnectionUser get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseConnectionUser_11(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.DatabaseConnectionUser);

  @override
  _i2.TableInfo<T, D> get table => (super.noSuchMethod(
        Invocation.getter(#table),
        returnValue: _FakeTableInfo_27<T, D>(
          this,
          Invocation.getter(#table),
        ),
      ) as _i2.TableInfo<T, D>);

  @override
  _i5.Future<int> insert(
    _i2.Insertable<D>? entity, {
    _i2.InsertMode? mode,
    _i2.UpsertClause<T, D>? onConflict,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [entity],
          {
            #mode: mode,
            #onConflict: onConflict,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> insertFromSelect(
    _i2.BaseSelectStatement<dynamic>? select, {
    required Map<_i2.Column<Object>, _i2.Expression<Object>>? columns,
    _i2.InsertMode? mode = _i2.InsertMode.insert,
    _i2.UpsertClause<T, D>? onConflict,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertFromSelect,
          [select],
          {
            #columns: columns,
            #mode: mode,
            #onConflict: onConflict,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<D> insertReturning(
    _i2.Insertable<D>? entity, {
    _i2.InsertMode? mode,
    _i2.UpsertClause<T, D>? onConflict,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertReturning,
          [entity],
          {
            #mode: mode,
            #onConflict: onConflict,
          },
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<D>(
                this,
                Invocation.method(
                  #insertReturning,
                  [entity],
                  {
                    #mode: mode,
                    #onConflict: onConflict,
                  },
                ),
              ),
              (D v) => _i5.Future<D>.value(v),
            ) ??
            _FakeFuture_13<D>(
              this,
              Invocation.method(
                #insertReturning,
                [entity],
                {
                  #mode: mode,
                  #onConflict: onConflict,
                },
              ),
            ),
      ) as _i5.Future<D>);

  @override
  _i5.Future<D?> insertReturningOrNull(
    _i2.Insertable<D>? entity, {
    _i2.InsertMode? mode,
    _i2.UpsertClause<T, D>? onConflict,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertReturningOrNull,
          [entity],
          {
            #mode: mode,
            #onConflict: onConflict,
          },
        ),
        returnValue: _i5.Future<D?>.value(),
      ) as _i5.Future<D?>);

  @override
  _i5.Future<int> insertOnConflictUpdate(_i2.Insertable<D>? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertOnConflictUpdate,
          [entity],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i2.GenerationContext createContext(
    _i2.Insertable<D>? entry,
    _i2.InsertMode? mode, {
    _i2.UpsertClause<T, D>? onConflict,
    bool? returning = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createContext,
          [
            entry,
            mode,
          ],
          {
            #onConflict: onConflict,
            #returning: returning,
          },
        ),
        returnValue: _FakeGenerationContext_21(
          this,
          Invocation.method(
            #createContext,
            [
              entry,
              mode,
            ],
            {
              #onConflict: onConflict,
              #returning: returning,
            },
          ),
        ),
      ) as _i2.GenerationContext);

  @override
  void writeInsertable(
    _i2.GenerationContext? ctx,
    Map<String, _i2.Expression<Object>>? map,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #writeInsertable,
          [
            ctx,
            map,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SimpleSelectStatement].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupSimpleSelectStatement extends _i1.Mock
    implements
        _i2.SimpleSelectStatement<_i3.$GroupTableTable, _i3.GroupDbModel> {
  MockGroupSimpleSelectStatement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get distinct => (super.noSuchMethod(
        Invocation.getter(#distinct),
        returnValue: false,
      ) as bool);

  @override
  Set<_i2.ResultSetImplementation<dynamic, dynamic>> get watchedTables =>
      (super.noSuchMethod(
        Invocation.getter(#watchedTables),
        returnValue: <_i2.ResultSetImplementation<dynamic, dynamic>>{},
      ) as Set<_i2.ResultSetImplementation<dynamic, dynamic>>);

  @override
  _i2.DatabaseConnectionUser get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseConnectionUser_11(
          this,
          Invocation.getter(#database),
        ),
      ) as _i2.DatabaseConnectionUser);

  @override
  _i2.ResultSetImplementation<_i3.$GroupTableTable, _i3.GroupDbModel>
      get table => (super.noSuchMethod(
            Invocation.getter(#table),
            returnValue: _FakeResultSetImplementation_26<_i3.$GroupTableTable,
                _i3.GroupDbModel>(
              this,
              Invocation.getter(#table),
            ),
          ) as _i2
              .ResultSetImplementation<_i3.$GroupTableTable, _i3.GroupDbModel>);

  @override
  bool get writeReturningClause => (super.noSuchMethod(
        Invocation.getter(#writeReturningClause),
        returnValue: false,
      ) as bool);

  @override
  set database(_i2.DatabaseConnectionUser? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set table(
          _i2.ResultSetImplementation<_i3.$GroupTableTable, _i3.GroupDbModel>?
              _table) =>
      super.noSuchMethod(
        Invocation.setter(
          #table,
          _table,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set whereExpr(_i2.Where? _whereExpr) => super.noSuchMethod(
        Invocation.setter(
          #whereExpr,
          _whereExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set orderByExpr(_i2.OrderBy? _orderByExpr) => super.noSuchMethod(
        Invocation.setter(
          #orderByExpr,
          _orderByExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set limitExpr(_i2.Limit? _limitExpr) => super.noSuchMethod(
        Invocation.setter(
          #limitExpr,
          _limitExpr,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set writeReturningClause(bool? _writeReturningClause) => super.noSuchMethod(
        Invocation.setter(
          #writeReturningClause,
          _writeReturningClause,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeStartPart(_i2.GenerationContext? ctx) => super.noSuchMethod(
        Invocation.method(
          #writeStartPart,
          [ctx],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<List<_i3.GroupDbModel>> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue:
            _i5.Future<List<_i3.GroupDbModel>>.value(<_i3.GroupDbModel>[]),
      ) as _i5.Future<List<_i3.GroupDbModel>>);

  @override
  _i5.Stream<List<_i3.GroupDbModel>> watch() => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
        ),
        returnValue: _i5.Stream<List<_i3.GroupDbModel>>.empty(),
      ) as _i5.Stream<List<_i3.GroupDbModel>>);

  @override
  _i2.JoinedSelectStatement<_i2.HasResultSet, dynamic> join(
          List<_i2.Join<_i2.HasResultSet, dynamic>>? joins) =>
      (super.noSuchMethod(
        Invocation.method(
          #join,
          [joins],
        ),
        returnValue: _FakeJoinedSelectStatement_17<_i2.HasResultSet, dynamic>(
          this,
          Invocation.method(
            #join,
            [joins],
          ),
        ),
      ) as _i2.JoinedSelectStatement<_i2.HasResultSet, dynamic>);

  @override
  _i2.JoinedSelectStatement<_i2.HasResultSet, dynamic> addColumns(
          List<_i2.Expression<Object>>? expressions) =>
      (super.noSuchMethod(
        Invocation.method(
          #addColumns,
          [expressions],
        ),
        returnValue: _FakeJoinedSelectStatement_17<_i2.HasResultSet, dynamic>(
          this,
          Invocation.method(
            #addColumns,
            [expressions],
          ),
        ),
      ) as _i2.JoinedSelectStatement<_i2.HasResultSet, dynamic>);

  @override
  void orderBy(List<_i2.OrderClauseGenerator<_i3.$GroupTableTable>>? clauses) =>
      super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [clauses],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeInto(_i2.GenerationContext? context) => super.noSuchMethod(
        Invocation.method(
          #writeInto,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.GenerationContext constructQuery() => (super.noSuchMethod(
        Invocation.method(
          #constructQuery,
          [],
        ),
        returnValue: _FakeGenerationContext_21(
          this,
          Invocation.method(
            #constructQuery,
            [],
          ),
        ),
      ) as _i2.GenerationContext);

  @override
  void where(_i2.Expression<bool> Function(_i3.$GroupTableTable)? filter) =>
      super.noSuchMethod(
        Invocation.method(
          #where,
          [filter],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void limit(
    int? limit, {
    int? offset,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
          {#offset: offset},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.GroupDbModel> getSingle() => (super.noSuchMethod(
        Invocation.method(
          #getSingle,
          [],
        ),
        returnValue: _i5.Future<_i3.GroupDbModel>.value(_FakeGroupDbModel_24(
          this,
          Invocation.method(
            #getSingle,
            [],
          ),
        )),
      ) as _i5.Future<_i3.GroupDbModel>);

  @override
  _i5.Stream<_i3.GroupDbModel> watchSingle() => (super.noSuchMethod(
        Invocation.method(
          #watchSingle,
          [],
        ),
        returnValue: _i5.Stream<_i3.GroupDbModel>.empty(),
      ) as _i5.Stream<_i3.GroupDbModel>);

  @override
  _i5.Future<_i3.GroupDbModel?> getSingleOrNull() => (super.noSuchMethod(
        Invocation.method(
          #getSingleOrNull,
          [],
        ),
        returnValue: _i5.Future<_i3.GroupDbModel?>.value(),
      ) as _i5.Future<_i3.GroupDbModel?>);

  @override
  _i5.Stream<_i3.GroupDbModel?> watchSingleOrNull() => (super.noSuchMethod(
        Invocation.method(
          #watchSingleOrNull,
          [],
        ),
        returnValue: _i5.Stream<_i3.GroupDbModel?>.empty(),
      ) as _i5.Stream<_i3.GroupDbModel?>);

  @override
  _i2.Selectable<N> map<N>(N Function(_i3.GroupDbModel)? mapper) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [mapper],
        ),
        returnValue: _FakeSelectable_20<N>(
          this,
          Invocation.method(
            #map,
            [mapper],
          ),
        ),
      ) as _i2.Selectable<N>);

  @override
  _i2.Selectable<N> asyncMap<N>(
          _i5.FutureOr<N> Function(_i3.GroupDbModel)? mapper) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [mapper],
        ),
        returnValue: _FakeSelectable_20<N>(
          this,
          Invocation.method(
            #asyncMap,
            [mapper],
          ),
        ),
      ) as _i2.Selectable<N>);
}
